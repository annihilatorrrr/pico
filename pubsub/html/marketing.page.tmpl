{{template "base" .}}

{{define "title"}}pubsub using ssh{{end}}

{{define "meta"}}
<meta name="description" content="pubsub using ssh" />

<meta property="og:type" content="website">
<meta property="og:site_name" content="{{.Site.Domain}}">
<meta property="og:url" content="https://{{.Site.Domain}}">
<meta property="og:title" content="{{.Site.Domain}}">
<meta property="og:description" content="pubsub using ssh">
{{end}}

{{define "attrs"}}class="container-sm"{{end}}

{{define "body"}}
<header>
  <h1 class="text-2xl font-bold text-center">pubsub using ssh</h1>
</header>

<hr />

<article>
  <p>
    The simplest authenticated pubsub system.  Send messages through
    user-defined channels.  By default, channels are private to the authenticated
    ssh user.  The default pubsub model is multicast with bidirectional
    blocking, meaning a publisher (<code>pub</code>) will send its message to all
    subscribers (<code>sub</code>) on a channel.  Further, both <code>pub</code> and
    <code>sub</code> will wait for at least one event to be sent or received on the channel.
  </p>

  <blockquote>This service is undergoing active development, expect bugs and restarts</blockquote>

  <div>
    <h2 class="text-xl">A basic API</h2>
    <pre>ssh {{.Site.Domain}} sub mykey</pre>
    <pre>echo "hello world!" | ssh {{.Site.Domain}} pub mykey</pre>
  </div>

  <div>
    <h2 class="text-xl">Simple desktop notifications</h2>
    <pre>ssh {{.Site.Domain}} sub notify; notify-send "job done!"</pre>
    <pre>./longjob.sh; ssh {{.Site.Domain}} pub notify -e</pre>
  </div>

  <div>
    <h2 class="text-xl">File sharing</h2>
    <pre>cat doc.md | ssh {{.Site.Domain}} pub thedoc</pre>
    <pre>ssh {{.Site.Domain}} sub thedoc > ./important.md</pre>
  </div>

  <div>
    <h2 class="text-xl">Simple CI/CD</h2>
    <pre>ssh {{.Site.Domain}} sub myimg; docker pull myimg && docker up -d dev</pre>
    <pre>docker buildx build --push -t myimg .; ssh {{.Site.Domain}} pub myimg -e</pre>
  </div>

  <div>
    <h2 class="text-xl">Send a public message</h2>
    <pre>echo "hello world!" | ssh send.pico.sh pub mychan -p</pre>
    <p>Now anyone with a <code>pico</code> account can subscribe to this channel:</p>
    <pre>ssh send.pico.sh sub mychan -p</pre>
  </div>

  <div>
    <h2 class="text-xl">Caveats</h2>
    <p>
      You must always pipe something into <code>pub</code> or else it will block
      indefinitely until the process is killed.  However, you can provide a
      flag to send an empty message: <code>pub xyz -e</code>.
    </p>
  </div>

  <p>
    This project was heavily inspired by
    <a href="https://patchbay.pub">patchbay.pub</a>
  </p>

  <p>
    built on our <a href="https://github.com/picosh/pubsub">go pkg</a>.
  </p>

  <div class="text-center">
    <a href="https://pico.sh/getting-started" class="btn-link my-2 inline-block">GET STARTED</a>
  </div>
</article>

{{template "marketing-footer" .}}
{{end}}
