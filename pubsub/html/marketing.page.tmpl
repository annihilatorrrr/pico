{{template "base" .}}

{{define "title"}}pipe: authenticated pubsub over ssh{{end}}

{{define "meta"}}
<meta name="description" content="authenticated *nix pipes over ssh" />

<meta property="og:type" content="website">
<meta property="og:site_name" content="{{.Site.Domain}}">
<meta property="og:url" content="https://{{.Site.Domain}}">
<meta property="og:title" content="{{.Site.Domain}}">
<meta property="og:description" content="pubsub using ssh">
{{end}}

{{define "attrs"}}class="container-sm"{{end}}

{{define "body"}}
<header class="flex flex-col items-center gap-2">
  <div class="flex flex-col">
    <img src="https://pico.sh/logo.svg" alt="pico logo" width="50" height="50" />
    <canvas id="canvas" width="50" height="50"></canvas>
    <hr width="100%" class="m-0" />
  </div>
  <h1 class="text-2xl font-bold text-center">Authenticated *nix pipes over ssh</h1>
</header>

<article class="flex flex-col gap-2">
  <div>
    <p>
      The simplest authenticated pubsub system.  Send messages through
      user-defined topics (aka channels).  By default, topics are private to the authenticated
      ssh user.  The default pubsub model is multicast with bidirectional
      blocking, meaning a publisher (<code>pub</code>) will send its message to all
      subscribers (<code>sub</code>) for a topic.  There can be many publishers
      and many subscribers on a topic. Further, both <code>pub</code> and
      <code>sub</code> will wait for at least one event to be sent or received on the topic.
    </p>

    <h2 class="text-lg">Features</h2>

    <ol>
      <li>Familiar *nix pipes API</li>
      <li>Zero-install</li>
      <li>Authenticated pubsub using ssh</li>
      <li>Private pubsub by default</li>
      <li>Public pubsub by topic (opt-in)</li>
      <li>Multicast (many pubs to many subs)</li>
      <li>Bidirectional (e.g. chat)</li>
      <li>Configurable blocking characteristics for <code>pub</code></li>
      <li>Configurable timeout for <code>pub</code></li>
      <li>Paradigms for connecting to a topic:
        <ol>
          <li>Read (<code>sub</code>)</li>
          <li>Write (<code>pub</code>)</li>
          <li>Read & Write (<code>pipe</code>)</li>
        </ol>
      </li>
    </ol>

    <blockquote>This service is undergoing active development, expect bugs, feature dev, and server restarts</blockquote>
  </div>

  <div>
    <h2 class="text-xl">A basic API</h2>
    <p>Pipe some data into our ssh app and we will send it to anyone listening.</p>
    <pre>ssh {{.Site.Domain}} sub mykey</pre>
    <pre>echo "hello world!" | ssh {{.Site.Domain}} pub mykey</pre>

    <details>
      <summary>Demo</summary>
      <script
        src="https://asciinema.org/a/679717.js"
        id="asciicast-679717"
        async="true"
        data-theme="dracula"
        data-loop="true"
        data-speed="1.5"
        data-idle-time-limit="2"
      ></script>
    </details>
  </div>

  <div>
    <h2 class="text-xl">Simple desktop notifications</h2>
    <p>Want to quickly receive a notification when a job is done?  It can be as simple as:</p>
    <pre>ssh {{.Site.Domain}} sub notify; notify-send "job done!"</pre>
    <pre>./longjob.sh; ssh {{.Site.Domain}} pub notify -e</pre>
  </div>

  <div>
    <h2 class="text-xl">File sharing</h2>
    <p>Sometimes you need data exfiltration and all you have is SSH:</p>
    <pre>cat doc.md | ssh {{.Site.Domain}} pub thedoc</pre>
    <pre>ssh {{.Site.Domain}} sub thedoc > ./important.md</pre>

    <details>
      <summary>Demo</summary>
      <script
        src="https://asciinema.org/a/679715.js"
        id="asciicast-679715"
        async="true"
        data-theme="dracula"
        data-loop="true"
        data-speed="1.5"
        data-idle-time-limit="2"
      ></script>
    </details>
  </div>

  <div>
    <h2 class="text-xl">Pipe command output</h2>
    <p>
      Send command output through our <code>pipe</code> command.  The
      <code>pipe</code> command is just like <code>pub</code> except it
      is non-blocking and also acts like a <code>sub</code>.  So a client
      that can read and write to the topic.
    </p>
    <pre>ssh {{.Site.Domain}} sub htop</pre>
    <pre>htop | ssh {{.Site.Domain}} pipe htop</pre>

    <details>
      <summary>Demo</summary>
      <script
        src="https://asciinema.org/a/679712.js"
        id="asciicast-679712"
        async="true"
        data-theme="dracula"
        data-loop="true"
        data-speed="1.5"
        data-idle-time-limit="2"
      ></script>
    </details>
  </div>

  <div>
    <h2 class="text-xl">Chat</h2>
    <p>Use our <code>pipe</code> command to have a chat with someone.</p>
    <pre>ssh {{.Site.Domain}} pipe mychan -p</pre>
    <p>
      Now anyone with a <code>pico</code> account can subscribe to this
      topic using the same command and start typing!
    </p>

    <details>
      <summary>Demo</summary>
      <script
        src="https://asciinema.org/a/679709.js"
        id="asciicast-679709"
        async="true"
        data-theme="dracula"
        data-loop="true"
        data-speed="1.5"
        data-idle-time-limit="2"
      ></script>
    </details>
  </div>

  <div>
    <h2 class="text-xl">Pipe reverse shell</h2>
    <p>If you squint hard enough you can give users interactive access to your shell.</p>
    <pre>mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | ssh {{.Site.Domain}} pipe myshell > /tmp/f</pre>
    <pre>ssh {{.Site.Domain}} pipe myshell</pre>

    <details>
      <summary>Demo</summary>
      <script
        src="https://asciinema.org/a/679704.js"
        id="asciicast-679704"
        async="true"
        data-theme="dracula"
        data-loop="true"
        data-speed="1.5"
        data-idle-time-limit="2"
      ></script>
    </details>
  </div>

  <div>
    <h2 class="text-xl">Simple CI/CD</h2>
    <p>
      I'm always looking for easy ways to simplify deploying apps
      automatically.  Having an authenticated, zero-install event system
      seems handy for this purpose.
    </p>
    <pre>ssh {{.Site.Domain}} sub myimg; docker pull myimg && docker up -d dev</pre>
    <pre>docker buildx build --push -t myimg .; ssh {{.Site.Domain}} pub myimg -e</pre>
  </div>

  <div>
    <h2 class="text-xl">Pubsub interactions</h2>

    <h3 class="text-lg">Multiple subs</h3>
    <p>
      Have many subscribers, they will all receive the message.
    </p>
    <pre>ssh {{.Site.Domain}} sub foobar</pre>
    <pre>ssh {{.Site.Domain}} sub foobar</pre>
    <pre>while true; do echo "foobar1"; sleep 1; done | ssh {{.Site.Domain}} pub foobar</pre>

    <details>
      <summary>Demo</summary>
      <script
        src="https://asciinema.org/a/679699.js"
        id="asciicast-679699"
        async="true"
        data-theme="dracula"
        data-loop="true"
        data-speed="1.5"
        data-idle-time-limit="2"
      ></script>
    </details>

    <h3 class="text-lg">Multiple pubs</h3>
    <p>Have many publishers send messages to subscribers.</p>
    <pre>while true; do echo "foobar1"; sleep 1; done | ssh {{.Site.Domain}} pub foobar</pre>
    <pre>while true; do echo "foobar2"; sleep 1; done | ssh {{.Site.Domain}} pub foobar</pre>
    <pre>ssh {{.Site.Domain}} sub foobar</pre>

    <details>
      <summary>Demo</summary>
      <script
        src="https://asciinema.org/a/679698.js"
        id="asciicast-679698"
        async="true"
        data-theme="dracula"
        data-loop="true"
        data-speed="1.5"
        data-idle-time-limit="2"
      ></script>
    </details>

    <h3 class="text-lg">Multiple pubs and subs</h3>
    <p>Have many publishers send messages to many subscribers.</p>
    <pre>ssh {{.Site.Domain}} sub foobar</pre>
    <pre>ssh {{.Site.Domain}} sub foobar</pre>
    <pre>while true; do echo "foobar1"; sleep 1; done | ssh {{.Site.Domain}} pub foobar</pre>
    <pre>while true; do echo "foobar2"; sleep 1; done | ssh {{.Site.Domain}} pub foobar</pre>

    <details>
      <summary>Demo</summary>
      <script
        src="https://asciinema.org/a/679694.js"
        id="asciicast-679694"
        async="true"
        data-theme="dracula"
        data-loop="true"
        data-speed="1.5"
        data-idle-time-limit="2"
      ></script>
    </details>
  </div>

  <div>
    <h2 class="text-xl">Send a public message</h2>
    <pre>echo "hello world!" | ssh {{.Site.Domain}} pub mychan -p</pre>
    <p>Now anyone with a <code>pico</code> account can subscribe to this topic:</p>
    <pre>ssh {{.Site.Domain}} sub mychan -p</pre>
  </div>

  <div>
    <h2 class="text-xl">Caveats</h2>
    <p>
      You must always pipe something into <code>pub</code> or else it will block
      indefinitely until the process is killed.  However, you can provide a
      flag to send an empty message: <code>pub xyz -e</code>.
    </p>
  </div>

  <div>
    <h2 class="text-xl">Inspiration</h2>
    <p>
      A special thanks to <a href="https://patchbay.pub">patchbay.pub</a> for our inspiration.
    </p>
  </div>

  <div>
    <h2 class="text-xl">Latest posts</h2>
    <div class="flex items-center">
      <div class="mr font-italic">2024-10-06</div>
      <div><a href="https://blog.pico.sh/pubsub">pipe: our pubsub ssh service</a></div>
    </div>
  </div>

  <div class="text-center mb-2">
    <p>built on our <a href="https://github.com/picosh/pubsub">go pkg</a>.</p>
    <a href="https://pico.sh/getting-started" class="btn-link inline-block">GET STARTED</a>
  </div>
</article>

{{template "marketing-footer" .}}
{{end}}
